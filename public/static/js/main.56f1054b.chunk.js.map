{"version":3,"sources":["Components/Header/Header.js","Components/Hero/Hero.js","Components/Movie/Movie.js","Components/Modal/Modal.js","Components/Options/Options.js","config.js","App.js","serviceWorker.js","index.js"],"names":["header","props","className","onClick","resetMovieHandler","hero","isLoading","searchMovieHandler","toggleModalHandler","movie","src","posterUrl","alt","nameRu","year","rating","filmLength","genres","map","genre","description","href","webUrl","modal","show","children","toggleHandler","ReactDOM","createPortal","key","document","getElementById","options","onChange","filter","value","data-set","option","index","id","pages","url","window","location","origin","App","state","hasErrors","showModal","bind","selectGenreHandler","this","setState","getData","fetch","res","json","data","ev","target","Options","Component","Boolean","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56f1054b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst header = props => (\r\n    <header className=\"header\">\r\n        <h2 onClick={props.resetMovieHandler} className=\"logo\">Movie Picker</h2>\r\n    </header>\r\n)\r\n\r\nexport default header;","import React from 'react';\r\nimport './Hero.css';\r\n\r\nconst hero = ({isLoading, searchMovieHandler, toggleModalHandler}) => {\r\n    return(\r\n        <div className=\"hero\">\r\n            <h1 className=\"hero__title\">Never waste hours to find the perfect movie again!</h1>\r\n            {isLoading?\r\n                'LOADING....':    \r\n                <button onClick={searchMovieHandler} className=\"btn--call-to-action\">Pick a Movie</button>\r\n            }\r\n            <button onClick={toggleModalHandler} className=\"btn--configuration btn-open-filters\" >Configure Filters</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default hero;","import React from 'react';\r\nimport './Movie.css';\r\n\r\nconst movie = ({movie}) => {\r\n    return(\r\n    <div className=\"Movie\">\r\n        <img className=\"Movie__poster\" src={movie.posterUrl? movie.posterUrl: 'https://vignette.wikia.nocookie.net/houseki-no-kuni/images/3/3b/Missingimage.png/revision/latest?cb=20190328111547&path-prefix=ru'} alt=\"Poster\"></img> \r\n        <div className=\"Movie__content\">\r\n            <h2 className=\"Movie__content__title\">{movie.nameRu} ({movie.year})</h2>\r\n            <ul className=\"Movie__content__header\">\r\n                <li className=\"Movie__rating Movie__content__header__el\">Рейтинг: {movie.rating}</li>\r\n                {/* <li className=\"Movie__content__header__el\">By {movie.Director}</li> */}\r\n                <li className=\"Movie__content__header__el\">Хронометраж: {movie.filmLength}</li>\r\n                <li className=\"Movie__content__header__el\">Жанры: {movie.genres.map(genre => `${genre.genre}, `)}</li>\r\n            </ul>\r\n            <p className=\"Movie__content__description\">{movie.description}</p>\r\n            <a className=\"Movie__btn btn--call-to-action\" href={movie.webUrl}>Подробнее на Кинопоиске</a>\r\n        </div>\r\n\r\n\r\n        \r\n    </div>\r\n)}\r\n\r\nexport default movie;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Modal.css';\r\n\r\nconst modal = ({show, children, toggleHandler, className}) => {\r\n    return ReactDOM.createPortal(\r\n        show?\r\n        [\r\n        <div className={`Modal ${className}`} key=\"1\">\r\n            {children}\r\n        </div>,\r\n        <div className=\"backdrop\" key=\"2\" onClick={toggleHandler}></div>\r\n        ] :'',\r\n        document.getElementById('modal-root')\r\n        )\r\n}\r\n\r\nexport default modal;","import React from 'react';\r\nimport './Genres.css';\r\n\r\nconst options = ({options, onChange, filter}) => {\r\n    return (\r\n        <select onChange={onChange} className=\"Genres-list\">\r\n            <option value=\"0\" data-set>Любой</option>\r\n            {options.map((option, index) => <option key={index} value={option.id} className=\"Genres-list__item\">{`${option[filter]} `}</option>)}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default options;","export const genres = [\r\n    {id: 1750, genre: \"аниме\"},\r\n    {id: 22, genre: \"биография\"},\r\n    {id: 3, genre: \"боевик\"},\r\n    {id: 13, genre: \"вестерн\"},\r\n    {id: 19, genre: \"военный\"},\r\n    {id: 17, genre: \"детектив\"},\r\n    {id: 456, genre: \"детский\", pages:2},\r\n    {id: 20, genre: \"для взрослых\", pages:2},\r\n    {id: 12, genre: \"документальный\"},\r\n    {id: 8, genre: \"драма\"},\r\n    {id: 23, genre: \"история\"},\r\n    {id: 6, genre: \"комедия\"},\r\n    {id: 15, genre: \"короткометражка\"},\r\n    {id: 16, genre: \"криминал\"},\r\n    {id: 7, genre: \"мелодрама\"},\r\n    {id: 21, genre: \"музыка\"},\r\n    {id: 14, genre: \"мультфильм\"},\r\n    {id: 9, genre: \"мюзикл\"},\r\n    {id: 10, genre: \"приключения\"},\r\n    {id: 11, genre: \"семейный\"},\r\n    {id: 24, genre: \"спорт\"},\r\n    {id: 4, genre: \"триллер\"},\r\n    {id: 1, genre: \"ужасы\"},\r\n    {id: 2, genre: \"фантастика\"},\r\n    {id: 18, genre: \"фильм-нуар\", pages:4},\r\n    {id: 5, genre: \"фэнтези\"},\r\n]\r\n\r\nexport const url = `${window.location.origin}/api`","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Hero from './Components/Hero/Hero';\nimport Movie from './Components/Movie/Movie';\nimport Modal from './Components/Modal/Modal';\nimport Options from './Components/Options/Options';\nimport { genres, url } from './config';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: null,\n      isLoading: false,\n      hasErrors: false,\n      showModal: false,\n      options: {\n        genre: 0\n      }\n    };\n    this.searchMovieHandler = this.searchMovieHandler.bind(this);\n    this.resetMovieHandler = this.resetMovieHandler.bind(this);\n    this.toggleModalHandler = this.toggleModalHandler.bind(this);\n    this.selectGenreHandler = this.selectGenreHandler.bind(this);\n  };\n\n  toggleModalHandler() {\n    this.setState({\n      showModal: !this.state.showModal\n    })\n  }\n\n\n  resetMovieHandler() {\n    this.setState({movie: null});\n  }\n\n  async searchMovieHandler() {\n    this.setState({isLoading: true});\n    let movie;\n    try{\n      movie = await this.getData();\n    } catch(err) {\n      this.setState({isLoading: false, hasErrors: true});\n      return;\n    }\n\n    this.setState({isLoading: false, movie});\n  };\n\n  async getData() {\n    const genre = this.state.options.genre;\n    const res = await fetch(`${url}/films/${genre}`)\n    const movie = await res.json();\n    movie.data.rating = movie.rating;\n    return movie.data;\n  }\n\n  selectGenreHandler(ev) {\n    const genre = ev.target.value;\n    this.setState({options: {genre: genre}})\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Header resetMovieHandler={this.resetMovieHandler}/>\n          {this.state.movie? <Movie movie={this.state.movie}/>:\n          <Hero searchMovieHandler={this.searchMovieHandler} toggleModalHandler={this.toggleModalHandler} isLoading={this.state.isLoading}/>\n        }\n        {this.state.hasErrors? 'Network Error' : ''}\n          <Modal className=\"Preferences-modal\" show={this.state.showModal} toggleHandler={this.toggleModalHandler}>\n            <h3>Preferences</h3>\n            <label>Жанр:</label>\n            <Options onChange={this.selectGenreHandler} options={genres} filter=\"genre\"/>\n            <button onClick={this.toggleModalHandler}>Apply</button>\n          </Modal>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}